<?phpnamespace Hostkit\ShopBundle\Form\Type;use Symfony\Component\Form\AbstractType,    Symfony\Component\Form\FormBuilderInterface,    Symfony\Component\HttpFoundation\Request,    Symfony\Component\Form\FormEvents,    Symfony\Component\Form\FormEvent,    Symfony\Component\Security\Core\SecurityContext,    Symfony\Component\OptionsResolver\OptionsResolverInterface,    Doctrine\ORM\EntityRepository;class CheckoutType extends AbstractType {    public function __construct($em) {        $this->em = $em;    }    public function buildForm(FormBuilderInterface $builder, array $options) {        $builder            ->add("heading_one", "text", array('label' => 'Personal Informations', "mapped" => false, 'required' => false, 'attr' => array('data-heading' => 'h5')))            ->add("firstname", "text", array('label' => 'Firstname', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("lastname", "text", array('label' => 'Lastname', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("phone", "number", array('label' => 'Phone', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("email", "email", array('label' => 'E-Mail Address', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("address1", "text", array('label' => 'Address', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("postcode", "number", array('label' => 'Areacode', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("city", "text", array('label' => 'City', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("country", "text", array('label' => 'Country', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("state", "text", array('label' => 'State', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("heading_two", "text", array('label' => 'Your Login', "mapped" => false, 'required' => false, 'attr' => array('data-heading' => 'h5', 'class' => 'form-control')))            ->add("username", "text", array('label' => 'Username', 'required' => true, "mapped" => false, "read_only" => true, 'attr' => array('placeholder' => 'Your E-Mail Address', 'class' => 'form-control')))            ->add("password", "password", array('label' => 'Password', 'required' => true, 'attr' => array('class' => 'form-control')))            ->add("heading_three", "text", array('label' => 'Cart Options', "mapped" => false, 'required' => false, 'attr' => array('data-heading' => 'h5')))            //->add("package", "choice", array('label' => 'Package', 'required' => true))            ->add("package", 'text', array('label' => 'Package', "mapped" => false, 'read_only' => true, 'attr' => array('value' => $options['data']['product'][0]->getName(), 'class' => 'form-control') ))            //->add("package", 'entity', array('class' => 'HostkitCoreBundle:Product', 'property' => 'name', "mapped" => false, 'data' => $this->em->getReference("HostkitCoreBundle:Product", $options['data']['productId']), 'attr' => array('class' => 'form-control')))            //->add("billing_cycle", "choice", array('label' => 'Billing Cycle', 'required' => false, "mapped" => false, 'choices' => array(1 => 'monthly',3 => 'quarterly', 6 => 'semiannually', 12 => 'yearly'), 'data' => 1))            //->add("billing_cycle", "choice", array('label' => 'Billing Cycle', 'required' => false, "mapped" => false, 'choices' => ($options['data']['productId'] == 0 ? array(0 => ' - ', 1 => 'Monthly', 3 => 'Quarterly', 6 => 'Semiannually', 12 => 'Yearly') : array(1 => 'Monthly ' . ($options['data']['product'][0]->getMdiscount() > 0 ? $options['data']['product'][0]->getMdiscount() . '% Discount' : ''), 3 => 'Quarterly ' . ($options['data']['product'][0]->getQdiscount() > 0 ? $options['data']['product'][0]->getQdiscount() . '% Discount' : ''), 6 => 'Semiannually ' . ($options['data']['product'][0]->getSdiscount() > 0 ? $options['data']['product'][0]->getSdiscount() . '% Discount' : ''), 12 => 'Yearly     ' . ($options['data']['product'][0]->getAdiscount() > 0 ? $options['data']['product'][0]->getAdiscount() . '% Discount' : ''))), 'data' => ($options['data']['productId'] == 0 ? 0 : 1), 'attr' => array('class' => 'form-control')))            //->add("billing_cycle", "choice", array('label' => 'Billing Cycle', 'expanded' => true, 'required' => true, "mapped" => false, 'choices' => array(1 => ' Monthly ',3 => ' Quarterly ', 6 => ' Semiannually ', 12 => ' Yearly '), 'data' => $options['data']['productId'], 'attr' => array('class' => 'form-control')))            ;        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {            $options = $event->getForm()->getConfig()->getOptions();            $form = $event->getForm();            if ($options['data']['product'][0]->getTypeId() == 2) {                $form->add("billing_cycle", "choice", array('label' => 'Billing Cycle', 'required' => false, "mapped" => false, 'choices' => ($options['data']['productId'] == 0 ? array(0 => ' - ', 1 => 'Monthly', 3 => 'Quarterly', 6 => 'Semiannually', 12 => 'Yearly') : array(1 => 'Monthly ' . ($options['data']['product'][0]->getMdiscount() > 0 ? $options['data']['product'][0]->getMdiscount() . '% Discount' : ''), 3 => 'Quarterly ' . ($options['data']['product'][0]->getQdiscount() > 0 ? $options['data']['product'][0]->getQdiscount() . '% Discount' : ''), 6 => 'Semiannually ' . ($options['data']['product'][0]->getSdiscount() > 0 ? $options['data']['product'][0]->getSdiscount() . '% Discount' : ''), 12 => 'Yearly     ' . ($options['data']['product'][0]->getAdiscount() > 0 ? $options['data']['product'][0]->getAdiscount() . '% Discount' : ''))), 'data' => ($options['data']['productId'] == 0 ? 0 : 1), 'attr' => array('class' => 'form-control')));                $form->add("agb", "checkbox", array('label' => ' I have read and agree to the terms and conditions of use.', "mapped" => false, 'required' => true, 'attr' => array('data-label' => 'agb')));            } else if ($options['data']['product'][0]->getTypeId() == 1) {                $form->add("price", "text", array("label" => "Price", "mapped" => false, 'read_only' => true, 'attr' => array('style' => 'box-shadow: none; border: none', 'value' => '$' . $options['data']['product'][0]->getPrice())));                $form->add("agb", "checkbox", array('label' => ' I have read and agree to the terms and conditions of use.', "mapped" => false, 'required' => true, 'attr' => array('data-label' => 'agb')));            } else {                $form->add("price", "text", array("label" => "Price", "mapped" => false, 'read_only' => true, 'attr' => array('style' => 'box-shadow: none; border: none', 'value' => 'Free')));                $form->add("agb", "checkbox", array('label' => ' I have read and agree to the terms and conditions of use.', "mapped" => false, 'required' => true, 'attr' => array('data-label' => 'agb')));            }        });        }    public function getName() {        return 'client';    }    public function getDefaultOptions(array $options) {        return array('data_class' => 'Hostkit\CoreBundle\Entity\Client', 'id' => null);    }    public function getPackageChoices() {        //array_merge(array('0' => 'None'), $this->em->getRepository('HostkitCoreBundle:Product')->findAll());        $dbObject = $this->em->getRepository('HostkitCoreBundle:Product')->findAll();        foreach ($dbObject as $object) {            $choices[$object->getId()] = $object->getName();        }        $choices = array_merge(array('0' => 'None'), $choices);        return $choices;    }}